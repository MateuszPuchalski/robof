{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","serviceWorker.js","reducers.js","index.js","constants.js","Components/App.js","actions.js"],"names":["Card","name","username","email","className","src","alt","CardList","robots","map","robot","i","key","id","SearchBox","onChange","type","placeholder","Scroll","children","style","overflowY","border","height","Boolean","window","location","hostname","match","initialStateSearch","searchField","initialStateRobots","isPending","error","logger","createLogger","rootReducer","combineReducers","searchRobots","state","action","payload","requestRobots","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","dispatch","useDispatch","useState","filteredRobots","setFilteredRobots","useSelector","useEffect","fetch","then","response","json","data","catch","arr","filter","toLowerCase","includes","toLocaleLowerCase","evt","target","value","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.6d744176.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function Card({ name, username, email }) {\r\n  return (\r\n    <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n      <img src={`https://robohash.org/${username}?200x200`} alt=\"Robof\" />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport Card from \"./Card\";\r\n\r\nexport default function CardList({ robots }) {\r\n  return (\r\n    <>\r\n      {robots.map((robot, i) => {\r\n        return (\r\n          <Card\r\n            key={i}\r\n            id={robot.id}\r\n            name={robot.name}\r\n            username={robot.username}\r\n            email={robot.email}\r\n          />\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function SearchBox({ onChange }) {\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input\r\n        onChange={onChange}\r\n        className=\"pa3 ba b--green bg-lightest-blue\"\r\n        type=\"search\"\r\n        placeholder=\"search robots\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Scroll({ children }) {\r\n  return (\r\n    <div\r\n      style={{\r\n        overflowY: \"scroll\",\r\n        border: \"1px solid black\",\r\n        height: \"500px\"\r\n      }}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n} from \"./constants\";\r\n\r\nconst initialStateSearch = {\r\n  searchField: \"\"\r\n};\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return { ...state, searchField: action.payload };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst initialStateRobots = {\r\n  isPending: false,\r\n  robots: [],\r\n  error: \"\"\r\n};\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n  switch (action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return { ...state, isPending: true };\r\n\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return { ...state, robots: action.payload, isPending: false };\r\n\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return { ...state, error: action.error, isPending: false };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\r\nimport { createLogger } from \"redux-logger\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport \"./index.css\";\r\nimport \"tachyons\";\r\nimport App from \"./Components/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nimport { searchRobots, requestRobots } from \"./reducers\";\r\n\r\nconst logger = createLogger();\r\n\r\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\r\nconst store = createStore(\r\n  rootReducer,\r\n  applyMiddleware(thunkMiddleware, logger)\r\n);\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\r\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\r\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\r\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport CardList from \"./CardList\";\r\nimport SearchBox from \"./SearchBox\";\r\nimport Scroll from \"./Scroll\";\r\n\r\nimport { setSearchField, requestRobots } from \"../actions\";\r\n\r\nexport default function App({ store }) {\r\n  const dispatch = useDispatch();\r\n  const [filteredRobots, setFilteredRobots] = useState([]);\r\n  const robots = useSelector(state => state.requestRobots.robots);\r\n  const searchField = useSelector(state => state.searchRobots.searchField);\r\n\r\n  const onSearchChange = evt => {\r\n    dispatch(setSearchField(evt.target.value));\r\n  };\r\n\r\n  useEffect(() => {\r\n    dispatch(requestRobots());\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    const arr = robots.filter(robot => {\r\n      return robot.name.toLowerCase().includes(searchField.toLocaleLowerCase());\r\n    });\r\n    setFilteredRobots(arr);\r\n  }, [robots, searchField]);\r\n\r\n  return (\r\n    <div className=\"tc\">\r\n      <h1>Robof</h1>\r\n      <SearchBox onChange={onSearchChange} />\r\n      <Scroll>\r\n        <CardList robots={filteredRobots} />\r\n      </Scroll>\r\n    </div>\r\n  );\r\n}\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n} from \"./constants\";\r\n\r\nexport const setSearchField = text => {\r\n  return {\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n  };\r\n};\r\n\r\nexport const requestRobots = () => dispatch => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n    .then(response => response.json())\r\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }));\r\n};\r\n"],"sourceRoot":""}